<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="DevExpress.Data.v20.2" name="DevExpress.Data.v20.2, Version=20.2.4.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" />
  <data name="FormThemThietBi.IconOptions.SvgImage" type="DevExpress.Utils.Svg.SvgImage, DevExpress.Data.v20.2" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFlEZXZFeHByZXNzLkRhdGEudjIwLjIsIFZlcnNpb249MjAuMi40
        LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjg4ZDE3NTRkNzAwZTQ5YQUBAAAAHURl
        dkV4cHJlc3MuVXRpbHMuU3ZnLlN2Z0ltYWdlAQAAAAREYXRhBwICAAAACQMAAAAPAwAAAJcFAAAC77u/
        PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4NCjxzdmcgeD0iMHB4IiB5PSIwcHgi
        IHZpZXdCb3g9IjAgMCA0MzMuMTAyIDQzMy4xMDIiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93
        d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlu
        ayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgaWQ9IkNhcGFfMSIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5k
        Om5ldyAwIDAgNDMzLjEwMiA0MzMuMTAyIj4NCiAgPGc+DQogICAgPGc+DQogICAgICA8cGF0aCBkPSJN
        NDI5LjkwMiw1Ni43ODJjMC0xLjAyNC0xLjAyNC0yLjA0OC0xLjUzNi0yLjA0OGMtMS4wMjQsMC0yLjA0
        OCwwLTIuNTYsMC41MTJsLTQ2LjA4LDQ1LjA1NkwzMzIuMTEsNTIuNjg2bDQ2LjA4LTQ2LjA4ICAgIGMx
        LjAyNC0xLjAyNCwxLjAyNC0yLjU2LDAtMy41ODRjLTAuNTEyLTAuNTEyLTAuNTEyLTAuNTEyLTEuMDI0
        LTAuNTEyYy0zNC44MTYtNy42OC03MC42NTYsMi41Ni05Ni43NjgsMjYuNjI0ICAgIGMtMjQuNTc2LDI0
        LjU3Ni0xOC40MzIsNTMuMjQ4LTE0LjMzNiw3Mi4xOTJjMC41MTIsMi41NiwxLjAyNCw1LjYzMiwxLjUz
        Niw3LjY4Yy0xNi4zODQsMTcuNDA4LTE0MC4yODgsMTQxLjgyNC0xNTguNzIsMTU5LjIzMiAgICBjLTIu
        MDQ4LTAuNTEyLTQuMDk2LTEuMDI0LTYuNjU2LTEuNTM2Yy0xOC45NDQtNC42MDgtNDYuNTkyLTExLjI2
        NC03Mi4xOTIsMTMuODI0Yy0yNC4wNjQsMjUuNi0zNC4zMDQsNjEuNDQtMjYuNjI0LDk1Ljc0NCAgICBj
        MC41MTIsMS41MzYsMS41MzYsMi4wNDgsMy4wNzIsMi4wNDhjMC41MTIsMCwxLjAyNC0wLjUxMiwxLjAy
        NC0wLjUxMmw0Ni4wOC00NS4wNTZsNDcuNjE2LDQ3LjYxNmwtNDYuMDgsNDYuMDggICAgYy0xLjAyNCwx
        LjAyNC0xLjAyNCwyLjU2LDAsMy41ODRjMC41MTIsMC41MTIsMC41MTIsMC41MTIsMS4wMjQsMC41MTJj
        Ny4xNjgsMS41MzYsMTQuODQ4LDIuNTYsMjIuNTI4LDIuNTYgICAgYzI3LjY0OCwwLDU0LjI3Mi0xMC4y
        NCw3NC4yNC0yOS42OTZjMjQuNTc2LTI0LjU3NiwxOC40MzItNTMuMjQ4LDE0LjMzNi03Mi4xOTJjLTAu
        NTEyLTIuNTYtMS4wMjQtNS42MzItMS41MzYtNy42OCAgICBjMTYuMzg0LTE3LjQwOCwxNDAuMjg4LTE0
        MS44MjQsMTU4LjcyLTE1OS4yMzJsNi42NTYsMS41MzZjMTguNDMyLDQuNjA4LDQ3LjEwNCwxMS43NzYs
        NzIuMTkyLTEzLjMxMiAgICBDNDI3LjM0MiwxMjYuOTI2LDQzNy4wNyw5MS4wODYsNDI5LjkwMiw1Ni43
        ODJ6IiAvPg0KICAgIDwvZz4NCiAgPC9nPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAv
        Pg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8
        ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KICA8ZyAvPg0KPC9zdmc+Cw==
</value>
  </data>
</root>